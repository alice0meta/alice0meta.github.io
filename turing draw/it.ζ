################################ prelude COPIED ################################
Tnum ‚Üê Œπ=> typeof Œπ==='number'
random ‚Üê Œª(Œπ){‚Ü© arguments.length===0? Math.random() : Tnum(Œπ)? random()*Œπ |0 : _u.sample(Œπ) }
Time ‚Üê Œª(Œπ){ r ‚Üê arguments.length===0? new Date() : Œπ instanceof Date? Œπ : new Date(Tnum(Œπ)? Œπ*1e3 : Œπ) ;r.toString = Œª(){‚Ü© node.util.inspect(@) } ;‚Ü© r }
Object.defineProperty(Date.prototype,'i',{get(){‚Ü© +@ / 1e3}})
window.Œ≥ = window
Œ≥.Buffer = require('buffer').Buffer

#################################### prelude ###################################
$ ‚Üê Œπ=> [‚Ä¶document.querySelectorAll(Œπ)]

################################################################################
# { ,reg: ,seen: } -> { ,reg: ,seen: ,move: }
tabl ‚Üê [
	,[0,0 ,1,1,2]
	,[0,1 ,1,4,2]
	,[0,2 ,1,4,2]
	,[0,3 ,0,2,2]
	,[0,4 ,1,2,3]
	,[1,0 ,1,3,0]
	,[1,1 ,1,2,1]
	,[1,2 ,0,2,0]
	,[1,3 ,0,3,1]
	,[1,4 ,0,3,2]
	]
têë±p_sêë≤z ‚Üê [512,512]
têë±p ‚Üê Buffer.alloc(têë±p_sêë≤z.reduce((a,b)=>a*b))
head_reg ‚Üê 0 ;head_at ‚Üê 0

update ‚Üê I=>{ for( i‚Üê0 ;i<I ;i++ ){
	# t ‚Üê tabl.find(Œπ=> Œπ[0]===head_reg && Œπ[1]===têë±p[head_at])
	t ‚Üê tabl[5*head_reg + têë±p[head_at]]
	reg ‚Üê t[2] ;seen ‚Üê t[3] ;move ‚Üê t[4]
	head_reg = reg
	têë±p[head_at] = seen
	x ‚Üê head_at % têë±p_sêë≤z[0]
	y ‚Üê head_at / têë±p_sêë≤z[0] |0
	switch( move ){ default: œü()
		;break ;case 0: x++ ;x += têë±p_sêë≤z[0] ;x %= têë±p_sêë≤z[0]
		;break ;case 1: x-- ;x += têë±p_sêë≤z[0] ;x %= têë±p_sêë≤z[0]
		;break ;case 2: y-- ;y += têë±p_sêë≤z[1] ;y %= têë±p_sêë≤z[1]
		;break ;case 3: y++ ;y += têë±p_sêë≤z[1] ;y %= têë±p_sêë≤z[1]
		}
	head_at = têë±p_sêë≤z[0] * y + x
	} }

window.addEventListener('load',=>{
	Œ≥.canvas = $('canvas')[0]
	canvas.width = têë±p_sêë≤z[0]
	canvas.height = têë±p_sêë≤z[1]
	canvas.ctx = canvas.getContext('2d')
	canvas.imgData = canvas.ctx.createImageData(‚Ä¶têë±p_sêë≤z)
	setInterval(update_render,0.04*1e3)
	})

update_render ‚Üê =>{
	start ‚Üê Time().i
	for( i‚Üê0 ;i<350 ;i++ ){
		update(1000)
		if( Time().i - start > 0.04 ) break
		}
	color ‚Üê [
		,[0xf0,0x62,0x4b]
		,[0x2a,0x26,0x26]
		,[0xe8,0xe8,0xe8]
		,[0x3d,0x8e,0x91]
		,[0xf7,0xa2,0x1b]
		,[0xff,0xff,0x00]
		,[0x00,0xff,0xff]
		,[0xff,0x00,0xff]
		]
	t ‚Üê canvas.imgData.data
	for( i‚Üê0 ;i<têë±p.length ;i++ ){
		c ‚Üê color[têë±p[i]]
		t[4 * i + 0] = c[0]
		t[4 * i + 1] = c[1]
		t[4 * i + 2] = c[2]
		t[4 * i + 3] = 0xff
		}
	canvas.ctx.putImageData(canvas.imgData,0,0)
	}

##################################### note #####################################
# Fractal  5,4,4,2,1,1,3,2,4,3,1,2,2,3,1,2,1,3,2,0,2,2,3,2,3,0,2,3,2,4,2,2,0,2,0,1,1,0,2,3,0,1,2,1,2,3,3,3,2,0,1,1,3,2,2,0,2,2,3,3,2,0
# Scan  4,3,0,1,2,3,1,0,1,1,0,2,2,1,3,2,2,0,1,3,0,2,0,1,2,2,2,2,0,0,1,3,3,1,3,2,2,0
# Matrix  6,4,1,2,0,1,3,1,4,3,3,1,3,0,5,2,1,4,2,0,2,1,1,4,1,0,1,3,0,5,1,3,1,1,3,0,1,1,2,3,3,5,1,1,3,1,0,3,1,2,1,1,1,1,3,3,3,2,2,2,3,3,2,1,3,5,3,0,2,3,2,4,1,1
# Movement  3,3,1,1,3,0,1,1,2,1,2,2,2,2,1,2,2,1,1,3,1,1,0,2,1,1,1,2,0
# Computation  2,5,1,1,2,1,3,0,1,4,2,1,2,1,1,4,2,0,2,0,0,2,2,0,3,1,1,2,3,0,3,2
# 	2,5
# 	,[0,0 ,1,1,2]
# 	,[1,0 ,3,1,0]
# 	,[0,1 ,4,1,2]
# 	,[1,1 ,2,1,1]
# 	,[0,2 ,4,1,2]
# 	,[1,2 ,2,0,0]
# 	,[0,3 ,2,0,2]
# 	,[1,3 ,3,0,1]
# 	,[0,4 ,2,1,3]
# 	,[1,4 ,3,0,2]
# Complex  3,3,2,1,2,1,2,1,0,2,1,2,1,3,1,1,1,1,2,0,1,1,3,2,2,0,0,1,1
# Quads  4,3,2,2,2,1,1,0,3,1,2,2,2,1,1,1,0,3,2,3,1,1,0,0,1,1,2,2,2,1,1,2,1,2,1,2,1,3
# Fins  4,3,0,2,3,3,1,3,2,1,0,3,1,0,3,2,3,2,1,2,0,1,3,1,1,2,1,1,0,0,1,3,2,2,0,0,2,1
# Blades  4,3,3,1,0,1,2,2,1,2,3,1,1,3,3,1,0,3,1,3,3,1,3,2,2,3,0,1,0,3,2,0,3,2,2,2,1,0
# Chaos  4,3,3,1,0,2,2,3,1,2,0,1,1,3,0,1,3,2,1,3,2,2,3,2,1,2,2,2,3,2,2,0,1,1,2,2,2,0
# Rapids  3,6,2,2,3,2,4,0,0,1,0,2,1,2,1,1,0,1,2,3,2,3,0,2,1,0,2,5,3,2,5,2,2,4,1,1,5,0,2,4,3,0,4,0,0,1,1,2,1,3,2,1,0,2,2,0
# Filler  3,4,2,2,0,1,2,0,2,1,0,1,1,1,2,3,0,0,1,1,0,2,3,0,3,0,1,2,2,1,1,2,2,2,1,0,3,0
# Seizures  4,3,3,1,2,3,1,0,3,1,3,1,2,3,2,2,0,1,2,1,3,2,3,0,2,0,3,1,2,2,2,2,3,1,1,1,2,3
# Spill  4,3,1,2,2,3,1,0,3,1,3,1,1,2,2,1,1,3,1,0,2,1,0,2,2,0,0,1,3,3,2,3,3,2,2,3,1,3
# Pangaea  6,3,0,1,3,1,1,2,1,2,1,2,2,0,3,1,3,4,1,2,2,1,0,3,1,2,1,2,3,4,1,0,5,1,1,2,1,3,2,2,0,2,1,0,4,2,2,4,2,1,0,2,0,1,1,0
# Shooting Stars  6,4,4,2,2,4,3,3,2,2,3,1,2,2,0,2,0,3,1,3,4,1,2,2,1,0,3,3,1,2,2,0,3,1,0,4,1,3,4,1,1,0,1,3,0,1,0,5,2,2,5,1,0,2,1,0,4,3,3,3,1,1,1,2,3,5,3,1,4,1,2,4,1,1

# it would be neat if there was a way i could define "interesting" to make it easier to find "interesting" turing machines by pruning away random results that are less "interesting" and by exploring how i changing a program changes how "interesting" it is
